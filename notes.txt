


abricate shows off program well


the galaxy params are more like suggestions than rules

helps link something in the command string to known values etc 


galaxy params should be parsed as-is
at postprocessing stage should be remapped into final understanding of underlying tool



non-flag bool params:
    - two string
        - at postprocessing stage treat as 2 value select with string type
        - usually 'yes'/'no' or 'TRUE'/'FALSE' etc
        - may be two modes / option values
    - two flags
        - may be individual flags 
        - may be kv pairs
        - may be same kv pair but with different values




flag-list select params:



Richard:
    - how do you want to handle select params encompassing multiple flags?


Tools with unsupported features

For loops
    - genetrack
    - annotateBed


cutadapt generally super fucked

Macro parsing not working as expected! Fastp




Current thoughts:
- optionality for arguments is not possible to identify. can supply defaults in most cases as workaround. 


Command parsing
    - #include not supported
    - multiline bash blocks not supported (about 12 tools)
    - currently throwing out bash conditionals
    - should add bash aliases - 'export AUGUSTUS_CONFIG_PATH=`pwd`/augustus_dir/'


Non-supported features
    - for loop statements
    - aliases with anything except '#set x = y' structure


What the hell is bcftools_cnv.xml doing with mv $outputs? 

Command parsing

what is the main goal here? 
- options (and their arguments)
- identify the base command word
- positional arguments

   

COMMAND DATASTRUCTURES

aliases
{
    source [str]:    alias [Alias]
                    {
                        alias.source: str
                        alias.dest: str
                        alias.text: str
                        alias.instruction: str
                    }
}

env_vars - list of strings (each string is varname)
{
    '$AUGUSTUS_CONFIG_PATH',
}

params - gx_var is stripped to minimal form: $var
{
    param.gx_var [str]: param [Param]
                        {
                            param.name: str
                            param.gx_var: str
                            param.janis_var: str
                            param.galaxy_type: str
                        }
}

command_words
[
    cmdword [CommandWord]
    {
        cmdword.text = text
        cmdword.command_num = command_num
        cmdword.in_loop = False
        cmdword.in_conditional = False
    },

    
]








Datatypes 

UnionType 
 - never used
 - single datatype is selected instead 

Optional
 - if optional="true" in param
 - if appears only in conditional line
 - need to add in conditional block

Array
 - only if 
    - data_collection param
    - data param with multiple="True"
    - collection output
    - output with '*' or '.+' in 'pattern'











known limitations:

ignoring param.name is not unique 
    ie param1.name = param2.name but param1.gx_var != param2.gx_var

ignored complex or rare features 
    data->change_format
    data->actions
    data->default_identifier_source
    discover_datasets->recurse

for loops over array variables ignored
    #for $bed in $names.beds:
        '${bed.input}'
    #end for 

should I have a list of unhandled scenarios for runtime warnings? yes.





future features:
 - positional arguments
 - #set directives
 - global macros, tokens and set directives
 - cheetah function parsing -> temp vars 
 - DataCollectionParam, DataColumnParam, HiddenParam parsing
 - <repeat> tag 
 - <options> tag 