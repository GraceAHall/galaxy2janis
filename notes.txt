

Params
    the galaxy params are more like suggestions than rules
    galaxy params should be parsed as-is
    at postprocessing stage should be remapped into final understanding of underlying tool


AT postprocess stage
    bool params:
        - truevalue and falsevalue are 


from non-galaxy command string
--augustus=true

have a registry
know that
    --augustus=true is key-val pair
    --augustus= can be set from $use_augustus boolean gx param
    can simply look at $use_augustus and confirm that either truevalue or falsevalue == '--augustus=true'
    can then set that attribute when translating external -> galaxy 


SELECT PARAMS

list of flags (one may be blank)

    (bedtools bamtobed)
    <option value="">Create a 6-column BED file</option>
    <option value="-bed12">Create a full, 12-column "blocked" BED  file</option>
    <option value="-bedpe">Create a paired-end, BEDPE format</option>

list of options

    (bedtools genomecoveragebed)
    <option value="">both strands combined</option>
    <option value="-strand +">positive strand only</option>
    <option value="-strand -">negative strand only</option>

list of kv pairs

    (lastz)
    <option value="--strand=both" selected="True">Both</option>
    <option value="--strand=plus">Plus</option>
    <option value="--strand=minus">Minus</option>

a blend

    (lastz)
    <option value="--transition" selected="true">One</option>
    <option value="--transition=2">Two</option>
    <option value="--notransition">None</option>


if the param is select
    check that each option is "" or starts with "-"
    if true:
        inject all the options directly into the list of command words




BOOLEAN PARAMS

SINGLE VALUE

single value but its assigned to falsevalue

    (mothur pairwise.seqs)
    truevalue="" falsevalue="countends=false," 

single value and its spaced kv pair

    (circos macros)
    truevalue="flow = continue"
    falsevalue=""


TWO DIFFERENT VALUES

    (allegro)
    truevalue="on"
    falsevalue="off"

    (bcftools_query)
    truevalue="True"
    falsevalue="False"

    (art/macros)
    truevalue="centimorgan"
    falsevalue="recombination"

    (augustus)
    truevalue="1"
    falsevalue="0" 

involving flags

    (kofamscan)
    truevalue="--report-unannotated"
    falsevalue="--no-report-unannotated" 

kv_pairs yes/no

    (minimap2)
    truevalue="--splice-flank=yes" 
    falsevalue="--splice-flank=no" 

single option, two values

    (velvetg)
    truevalue="-read_trkg yes" 
    falsevalue="-read_trkg no"




skip conditions
at least 1 of [truevalue, falsevalue] == ""

else
expand every option (select param), truevalue/falsevalue and try to interpret as 









flag-list select params:



Richard:
    - how do you want to handle select params encompassing multiple flags?


Tools with unsupported features

For loops
    - genetrack
    - annotateBed


cutadapt generally super fucked

Macro parsing not working as expected! Fastp




Current thoughts:
- optionality for arguments is not possible to identify. can supply defaults in most cases as workaround. 


Command parsing
    - #include not supported
    - multiline bash blocks not supported (about 12 tools)
    - currently throwing out bash conditionals
    - should add bash aliases - 'export AUGUSTUS_CONFIG_PATH=`pwd`/augustus_dir/'


Non-supported features
    - for loop statements
    - aliases with anything except '#set x = y' structure


What the hell is bcftools_cnv.xml doing with mv $outputs? 

Command parsing

what is the main goal here? 
- options (and their arguments)
- identify the base command word
- positional arguments

   

COMMAND DATASTRUCTURES

aliases
{
    source [str]:    alias [Alias]
                    {
                        alias.source: str
                        alias.dest: str
                        alias.text: str
                        alias.instruction: str
                    }
}

env_vars - list of strings (each string is varname)
{
    '$AUGUSTUS_CONFIG_PATH',
}

params - gx_var is stripped to minimal form: $var
{
    param.gx_var [str]: param [Param]
                        {
                            param.name: str
                            param.gx_var: str
                            param.janis_var: str
                            param.galaxy_type: str
                        }
}

command_words
[
    cmdword [CommandWord]
    {
        cmdword.text = text
        cmdword.command_num = command_num
        cmdword.in_loop = False
        cmdword.in_conditional = False
    },

    
]








Datatypes 

UnionType 
 - never used
 - single datatype is selected instead 

Optional
 - if optional="true" in param
 - if appears only in conditional line
 - need to add in conditional block

Array
 - only if 
    - data_collection param
    - data param with multiple="True"
    - collection output
    - output with '*' or '.+' in 'pattern'











known limitations:

ignoring param.name is not unique 
    ie param1.name = param2.name but param1.gx_var != param2.gx_var

ignored complex or rare features 
    data->change_format
    data->actions
    data->default_identifier_source
    discover_datasets->recurse

for loops over array variables ignored
    #for $bed in $names.beds:
        '${bed.input}'
    #end for 

should I have a list of unhandled scenarios for runtime warnings? yes.





future features:
 - positional arguments
 - #set directives
 - global macros, tokens and set directives
 - cheetah function parsing -> temp vars 
 - DataCollectionParam, DataColumnParam, HiddenParam parsing
 - <repeat> tag 
 - <options> tag 