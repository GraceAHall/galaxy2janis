
Current thoughts:
- optionality for arguments is not possible to identify. can supply defaults in most cases as workaround. 


Command parsing
    - #include not supported
    - multiline bash blocks not supported (about 12 tools)
    - currently throwing out bash conditionals
    - should add bash aliases - 'export AUGUSTUS_CONFIG_PATH=`pwd`/augustus_dir/'





Command parsing

what is the main goal here? 
- identify the base command word
- options (and their arguments)
- positional arguments


1. approach
- identify bash syntax
    - parse using LARK
    - delete these lines

- identify #def directives
    - store the directive name
    - delete directive lines

- identify #set directives
    - store the alias
    - delete line 

- split remaining text by line
    - remove any lines starting with cheetah directives
    - should result in clean text consisting of statement which are all possible in the shell command

- extract each token and its position
    

2. MAIN DATASTRUCTURES
alias dict
- links variables which are set with #set directive
- can be galaxy params to a temp param, can be temp param to temp param

galaxy params
- 

tokens
- is the token  --option=arg / -option:arg ect?
    - break into an option. 
    - next.
- does the token start with '-'?
    - label as option
    - does the next token start with not '-'?
        - try to resolve it as a galaxy param. 
        - if possible and the param default value starts with '-'
            - next (next token is also an option)
        - else
            - set the next token as the option argument
- else
    - try to resolve it as a galaxy param. 
    - if possible and the param default value starts with '-'
        - label as option
    - else
        - positional arg








Datatypes 

UnionType 
 - never used
 - single datatype is selected instead 

Optional
 - if optional="true" in param
 - if appears only in conditional line
 - need to add in conditional block

Array
 - only if 
    - data_collection param
    - data param with multiple="True"
    - collection output
    - output with '*' or '.+' in 'pattern'











known limitations:

ignoring param.name is not unique 
    ie param1.name = param2.name but param1.gx_var != param2.gx_var

ignored complex or rare features 
    data->change_format
    data->actions
    data->default_identifier_source
    discover_datasets->recurse

for loops over array variables ignored
    #for $bed in $names.beds:
        '${bed.input}'
    #end for 

should I have a list of unhandled scenarios for runtime warnings? yes.





future features:
 - positional arguments
 - #set directives
 - global macros, tokens and set directives
 - cheetah function parsing -> temp vars 
 - DataCollectionParam, DataColumnParam, HiddenParam parsing
 - <repeat> tag 
 - <options> tag 