

TOOL PARSING



BUGS 


cutadapt input_1, input_2


prokka has no input assembly

get most recent build for wrapper version when doing parse_tool() - picard_markDuplicates.xml has error in the wrapper download

optional outputs
hisat2.xml
    ToolOutput(
		'output_unaligned_reads_l1',
		FastqSanger,
		selector=InputSelector("un_gz"),
		doc="unaligned reads (L)",
	),

unknown output (should i just ignore? yes)
see featureCounts.xml and others
    ToolOutput(
		'out_pairs',
		Array(FastqGz),
		selector=WildcardSelector("__UNKNOWN_OUTPUT__"),
		doc="Reads",
	),

2 records of same unknown output
hisat2.xml
    ToolOutput(
		'output_unaligned_reads_r',
		FastqSanger,
		selector=WildcardSelector("__UNKNOWN_OUTPUT__"),
		doc="unaligned reads (R)",
	),
	ToolOutput(
		'output_aligned_reads_r',
		FastqSanger,
		selector=WildcardSelector("__UNKNOWN_OUTPUT__"),
		doc="aligned reads (R)",
	),

duplicate prefix! cutadapt.xml
    ToolInput(
		'action',
		String,
		prefix='--action--action',
		separate_value_from_prefix=False,
		position=1,
		default="trim",
		doc="What to do if a match is found. possible values: lowercase, mask, none, retain, trim",
	),
    ToolInput(
		'info_file',
		TextFile,
		prefix='--info-file--info-file',
		separate_value_from_prefix=False,
		position=1,
		default=None,
		doc="Info File",
	),

duplicate outputs 
filtlong.xml
outputs = [
	ToolOutput(
		'output_string',
		Stdout(String),
	),
	ToolOutput(
		'outfile',
		FastqSanger,
		selector=WildcardSelector("output.fastq"),
		doc="Filtered FASTQ",
	),
kraken2.xml
    ToolOutput(
		'out1',
		Array(Fasta),
		selector=WildcardSelector("un_out_1.*"),
		doc="Unclassified forward",
	),
	ToolOutput(
		'out2',
		Array(Fasta),
		selector=WildcardSelector("un_out_2.*"),
		doc="Unclassified reverse",
	),
	ToolOutput(
		'out3',
		Array(Fasta),
		selector=WildcardSelector("cl_out_1.*"),
		doc="Classified forward",
	),
	ToolOutput(
		'out4',
		Array(Fasta),
		selector=WildcardSelector("cl_out_2.*"),
		doc="Classified reverse",
	),
	ToolOutput(
		'out1_1',
		Array(String),
		selector=WildcardSelector("un_out_1.*"),
		doc="Unclassified forward",
	),
	ToolOutput(
		'out2_1',
		Array(String),
		selector=WildcardSelector("un_out_2.*"),
		doc="Unclassified reverse",
	),
	ToolOutput(
		'out3_1',
		Array(String),
		selector=WildcardSelector("cl_out_1.*"),
		doc="Classified forward",
	),
	ToolOutput(
		'out4_1',
		Array(String),
		selector=WildcardSelector("cl_out_2.*"),
		doc="Classified reverse",
	),


conditionals! quast.xml
inputs = [
	# Positionals
	ToolInput(
		'quast',
		String,
		position=1,
		default=None,
		doc="None",
	),
	ToolInput(
		'metaquast',
		String(optional=True),
		position=2,
		default=None,
		doc="None",
	),















Minor (mostly formatting and cleanliness)
input_t_int -> t_int? cleaner?
in general, I think janis should allow single letter tags, even single digit. 
currently the ToolInput prefix is much more informative than the janis tag. 

- samtools_idxstats ew
    ToolInput(
		'input_@_file',
		File,
		prefix='-@',
		position=1,
		default="$addthreads",
		doc="None",
	),
- 'File' type or 'String' type should be default? what about ENV_VARS?
- tag formatting [not bug]: u_int1 (-u) / u_int2 (-U) (cutadapt)
- tag formatting [not bug]: out_out11, out_out12, out_out21, out_out22
- paths with quotes (fastqc)
    cp '/tmp/tmppzuicyfk/working/dataset_28_files'/*/fastqc_data.txt output.txt

Intermediate (has an impact on number of inputs/outputs, may break tool in some way)
- minimap2 
    -k19 -m200 
    no separation between prefix and value when value is int
    these are being identified as Flags rather than Options
    in general, I think janis should allow single letter tags.
    even single digit. 
    currently the prefix is much more informative than the janis tag. 
- minimap2
    too many positionals being created
- 'argument' attribute written incorrectly - causes 2 inputs
    see quast references_list1, references_list2
    maybe could check if the prefix is in the command? 
    could also ensure argument starts with '--', then check again? 
- multiple prefixes for option (hisat2)
    ToolInput(
		'trim51',
		Int(optional=True),
		prefix='-5',
		position=2,
		default=0,
		doc="Trim 5' end. Trim N bases from 5' (left) end of each read before alignment, default: 0",
	),
    ToolInput(
		'trim52',
		Int(optional=True),
		prefix='--trim5',
		position=2,
		default=0,
		doc="Trim 5' end. Trim N bases from 5' (left) end of each read before alignment, default: 0",
	)
- WildcardSelector for outputs, but XML also references $output in <command> (cutadapt)
    ToolOutput(
		'out_out11',
		Array(FastqSanger),
		selector=InputSelector("output_fastqsanger"),
		doc="Read 1 Output",
	),
    ToolOutput(
		'out_out12',
		Array(FastqSanger),
		selector=WildcardSelector("out1*"),
		doc="Read 1 Output",
	)


Major (program execution fails, tool definitely non-functional)
- !important should create a file containing tricky text, and ensure that the text
  is being assigned correct tokens
- challenging <command> text   (minimap2, bowtie2)
    lots of python expressions in the <command> section
    (minimap2) $reads_temp.append("read." + str($extension)) -> 3 positional CommandComponents
    ['$reads_temp.append(read.', '+', '$extension))']
    (bowtie2) $format_read_group("PL:", $rg_pl, '"', arg='--rg ')
    solutions:

    need better way of identifying these and just marking them as PYTHON_EXPRESSION or something

- __ZIP_COLLECTION__
    Apparently zips/unzips each file in the array, so the output is the same as the input but 
    everything is zipped. 
    This is one of apparently multiple inbuilt tools. 
    They aren't kept online - they're in the local galaxy tool dir lib/galaxy/tools/ 
    Can write a funciton which opens each XML and if the tool ids match, select this wrapper and move it to the wrappers folder. 
    proceed as usual. 

- featurecounts, samtools_view tool cannot load itself into galaxy representation
    <options from_data_table="featurecounts_anno">
        <filter type="data_meta" key="dbkey" ref="alignment" column="dbkey"/>
    </options>
    I believe this is a parsing issue, rather than needing to get galaxy server db info. 
    Not sure how to fix.
    see the following files in the featurecounts XML dir: 
        - tool_data_table_conf.xml.sample
        - tool_data_table_conf.xml.test
        - tool-data/featurecounts_anno.loc.sample
        - tool-data/gene_sets.loc.sample



WORKLFOW PARSING

Minor (mostly formatting and cleanliness)

intermediate (has an impact on number of inputs/outputs, may break workflow in some way)
- conditional params (simple_workflow.ga step)
    unicycler(
        l_file=w.unicycler_l_file,
        fastq_input1=w.in_forward_reads,
        fastq_input2=w.in_reverse_reads,
        s_fastqsanger=w.in_forward_reads,  
        pilon_path=w.unicycler_pilon_path,
        long=w.in_long_reads,
        start_genes=w.unicycler_start_genes,
        contamination=w.unicycler_contamination,
    )
    fastq_input1 / s_fastqsanger are governed by galaxy XML conditional case. 
    w.in_forward_reads can be wired to either depending on that case. 
    currently not evaluating the state of the case.

Major (program execution fails)

