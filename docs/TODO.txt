

TODO
- Bugs
- Test suite

PyPI
Production-level code
    - Top 10 / top 20 most common tools parsed correctly galaxy (cameron hyde list)
    - 3 Workflows parsed correctly
    - Error handling ?

BUGS
- #if #else causing multiple instances of variable
    - trimmomatic.xml mrsa_illumina
    - r1_ext, r2_ext
    - fastq_in_extension1, fastq_in_extension2
    - don't even know why these are being interpreted as a variable

DOCUMENTATION
- future features (subworkflows)
- supported / unsupported constructs
- key concepts
- parsing order
- key modules & their function
- how to edit translated workflow

FUTURE
- learn to package code and install into environment
- move connections to seperate list under workflow
- output of scattered step isn't always scattered - collection join tool
- cheetah lexer 
- antler tool?
- look into pretty printing library
- pre/postprocessing:
    - cheetah templating doesn't seem to be happening
    - dont dedent? 
- minimal tool translation
    - cheetah partial evaluation then re-identify tool components
- html files
    - quast / rgFastQC $report_html.files_path
    - probably about 6% of tools
- tool command string
    - string that cwl etc will execute
    - first place i look to fix translation
    - refresh command which updates the command string
- confidence
    - some params we are confident they're right, others are guesses
    - [HIGH] [MEDIUM] [LOW] confidence
- TTestCases (tool)
    - janis tool test parsing and evaluation functions (from xml to janis definition)
- syntax highlighting
    - we already have parsing ability (can identify constructs of text)
    - can use this to provide syntax highlighting to provide tutorials
    - eg nextflow steps, inputs, outputs, GO statement, etc
    - similar to regexr


-----
NOTES
-----

WRAPPERS
- currently seperated over 2 locations: wrapper definitions & downloads
- ideally have in same parent module
- wrappers.path()
- wrappers.download()
- wrappers.details()
- caches etc are confusing

DOCS
- properly define current capabilities
- define things which are not supported 
- outline list of in-development features
- docs to guide editing process
    - check the base_command looks right
    - check the input data arguments are right
    - check positionals - common source of error
    - check outputs 

LOGGING
- configfile / array / pre-step / post-step 
- line numbers or line spans
- pre-step & post-step
    - step.py: 
        tool.py needs your attention!
    - tool.py:  
        (pre-step)
        galaxy wrapper contains pre-execution logic.
        please review wrapper_command.xml lines 2-13 and add / edit / remove 
        any inputs which may have not been translated correctly.
        (post-step)
        galaxy wrapper contains post-execution logic.
        please review wrapper_command.xml lines 89-103 and add / edit / remove 
        any output which may have not been translated correctly.
        if the wrapper is performing additional commands which are necessary,
        you will need to create another workflow step 
        in future versions this may be handled automatically.
    Step() needs to get messages from parsing both workflow.ga1 and the wrapper.xml

MESSAGES
- user messages
    UserMessage:
        subtype: MessageType
        contents: str 
        file_reference: str
        line_reference: Tuple[int, int] (start stop, can be same line, dictates how its printed)
- basic messages (but no TextFormat, PathManager etc)
    - should be logged to logfiles
    - write the messages at the top of workflow.py
    - things which need attention: 
        - tool: no inputs
        - tool: no outputs
        - tool: has configfile
        - tool: repeat param
        - tool: no base command (surely should always check this anyway?)
        - tool: no container
        - step: unresolved input
- to report:
    - uncertain outputs

Protocol vs ABC 

CommandComponent should be protocol because no unified features of different components 
ComponentOrderingStrategy should be ABC because all child classes store same info and perform same method, just the strategy is different

CLI 
- (workflow) --tools-minimal:  only includes tool arguments in translation if relevant to this workflow
- if argument does not appear in the partial cheetah evaluated text, dont include. 
- process
    - create partially evaluated cheetah 
    - replace lines with original if survived
    - set this as the xmlcommandstring
    - proceed as normal
    - profit????

PRE/POST STEP
- pre step
    - options:
        - resolve at runtime 
            - method: 
                - galaxy cheetah templating
                - 
            - pros
            - cons
        - show to user 
            - method
            - pros
            - cons
    - simple text - handle? see chicViewpoint.xml pre-step
        - ie just basic commands and 1+ #if with no #elif or #else  (defs no nested #ifs)
        - 
    - complex text - show to user with line number references?

    - what does the pre-step often do? 
        - mainly revolves around setting up file names and folder structure 
        - ln -s     localises and names a file
        - mkdir     creates dir
        - #set      sets env var
        - #if (mostly just to know when to do the things above)
        - #for (again, mainly to set stuff above)
    - do we need to show the user pre-step for this tool, or is everything ok? 
    - 'see wrappers/fastqc/rgFastQC line 52 for context'
    - Janis UnixTool?
    - Janis CommandToolBuilder() is just an __init__() method

- post step
    - what does the post-step often do? 
        - mv [source] [dest]
        - cp
        - samtools

workflow: setting 'None' for non-optional tool inputs
    issue: need to manually set tool input as optional=True where the value (from step or inputs.yaml) is (correctly) None
    plan: put step and tool together so user can alter tool
    future: make optionality detection better (using conditional constructs)
    time: hours

tool: last two components ambiguity
    issue: are the last two words an option (--prefix and value), or a flag and positional?
    plan: user input - "hey user - is this an option, or two seperate arguments?"
    time: hours


    