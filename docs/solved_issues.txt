



SOLVED

issue
    cutadapt
    WildcardSelector outputs which also have direct <command> reference 
    WildcardSelector for outputs, but XML also references $output in <command> (cutadapt)
    ToolOutput('out_out11', selector=InputSelector("output_fastqsanger"))
    ToolOutput('out_out12', selector=WildcardSelector("out1*"))
solution
    when adding outputs with collection methods at end, check if they have already been identified and attached to a tool input. if so, ignore, else add.

issue
    hisat2
    Long and short form for argument (hisat2)
    ToolInput('trim51', Int(optional=True), prefix='-5')
    ToolInput('trim52', Int(optional=True), prefix='--trim5')
solution?
    issue disappeared during other bug fixes

issue
    hisat2
    wrong dynamiccommandstring being chosen as main tool statement for test cases 
solution
    improved MainStatementInferrer

issue
    minimap2 
    -k19 etc. no seperation between prefix and value.
    rules:
        - single preceeding dash
        - number is above 3
        - ntoken is not a Positional
solution    
    added logic to parse 'compound options' (eg -k19)
    uses the rules above to identify. tries to be as conservative as possible. 

issue
    seqtk sample
    'single_pass_mode' Boolean appears in options section not flags
solution
    this is actually kind of intended behaviour. 
    Boolean comes from the gxparam, but it could be [BOOLEAN] [VALUE]
    and the boolean could be actually a tool option.
    enhanced flag detection to handle this scenario - two adjacent tokens have different
    gxparams, and the first is a BoolParam

issue 
    seqtk sample tool input
    4_0=4.0
solution 
    improved TagManager formatting 

issue
    blank value for default attribute (bowtie2_wrapper)
    ToolInput(
		'rg',
		Int(optional=True),
		prefix='--rg',
		position=1,
		default=,
		doc="None",
	),
solution
    error with component.value_record.get_counts()
    was returning '' as a key with a certain count because the value_register
    can have blank values 


issue
    duplicate toolinput [bug]: references_list1 / references_list2 (quast)
    duplicate toolinput [bug]: max_ref_num1 / max_ref_num2 (quast)
    duplicate toolinput [bug]: discard_untrimmed1 / discard_untrimmed2 (cutadapt)
solution
    created searching feature to look for param arguments in the <command> text, and identify the best number of preceeding dashes

issue 
    fastqc contaminants1 contaminants2
    should be just single Option rather than a Positional and an Option
solution
    no idea, solved itself during other bug fixes

issue
    mismatch between janis tool tags and tool import statements
    picard_markduplicates vs picard_MarkDuplicates
    rseqc_genebody_coverage vs rseqc_geneBody_coverage
solution
    tool tag was being taken from tool.metadata.id not 
    from tag manager. 

issue
    imperfect UnknownOutput creation 
    - is duplicating other outputs 
    - picard_FilterSamReads InputOutput 'outFile'
solution
    test was to identify whether the gxparam was == another gxparam
    changed to gxparam.name (i think this is ok for outputs)

issue
    linking step outputs to tool outputs
    some outputs are created after main tool statement. 
    this would be fine if there was a wildcard expression to collect the output, but sometimes they're InputOutputs or RedirectOutputs. ie there is no collection method, and they are referenced in the <command> section. 
solution
    TEMPORARY FIX: created a function to detect and create these tool outputs. added UnknownOutput class to hold these. they are like WildcardOutputs except the detect pattern is '__UNKNOWN_OUTPUT__'


issue
    ENV_VAR positionals being allowed as base command
solution
    changed get_base_command() method. 

issue
    'data_column' galaxy params
"solution"
    pretend they're just IntegerParams and parse accordingly

issue
    tricky text:
        > '"Module \'${repeat.software_cond.software}: \'$pattern\' not found in the file \'$identifier\'"'
        > READ_NAME_REGEX='${ str( $read_name_regex ) }'
        > _JAVA_OPTIONS=\${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && (picard_MarkDuplicates)
        > cannot find 'metrics_file' (tool test evaulation)(picard_MarkDuplicates)
solution
    large reworking of line splitting (now shlex), KEYVAL_PAIRS and regex patterns surrounding these issues

issue
    picard_MarkDuplicates bash script being interpreted as positionals
solution
    replaced `backtick sections` with __BACKTICK_SHELL_STATEMENT__
    temp fix. 

issue
    READ_NAME_REGEX='${ str( $read_name_regex ) }'
solution
    removed spaced from within variables (${hello there} -> ${hellothere}) 
    this is probably bad. 
    only an issue really because its part of a KEY=VALUE pair, which takes priority. 

issue
    samtools_idxstats was selecting wrong statement as tool statement
solution
    created MainStatementInferrer to properly handle selecting correct tool statement

issue
    hisat2 - ERROR:galaxy.util.dbkeys:ERROR: Unable to read builds file: [Errno 2] No such file or directory: 'tool-data/shared/ucsc/builds.txt.sample'
solution
    added the tool-data folder from galaxy source to workdir

issue
    hisat2 tool input '11', '12', '21', '22'
solution
    hisat2 option '-1 ${reads1}' is interpreted as [RAW_NUM, ENV_VAR]
    RAW_NUM was not permitted to be considered a prefix - changed to allow this now. 

issue
    quast - missing 'r_fasta' parameter in workflow step
    find a better way to mark things as optional?
solution
    if a CommandComponent is not Optional and has default=None, but is not linked to a StepInput, can assume it is therefore Optional. 

issue
    prokka workflow output 'out_out...'
    w.output(
        "prokka_out_out_tbl",
        TextFile,
        source=(w.prokka, "out_out_tbl")
    )
    do we care about out_out? 
    this is because we prepend 'out_' but the tool output is already called 'out_tbl'. can check if already startswith 'out', but this may lead to issues. 
solution
    changed tag formatting to check if the basetag already exists

issue
    '.output' still appears on input connections to InputDataStep even though should be WorkflowInput
    long=w.long_reads.output
solution
    required huge refactor - InputDataStep was completely removed. replaced by adding a WorkflowInput instead. 

issue
    alphabetical sort workflow step runtime values w.input('name', datatype)
    w.input("unicycler_fq11", File)
    w.input("unicycler_contamination", Fasta)
    w.input("unicycler_fq12", File)
solution
    was just due to list[Tuple[str, InputValue]] being used as dict[str, InputValue] in a function. destroyed normal ordering. 

issue 
    None values appear in step definition - what does this mean? 
    glimmer=None,
    mgm=None,
	gene_finding=None
solution
    this almost always means use the default value. changed behaviour to reflect.

issue
    scores="", kmers="", fungus, eukaryote, k_mer_stats all have default value = "" (simple workflow quast)
solution
    was just bug in translating gx values into python

issue
    Html, Tabular Datatype in workflow outputs not being imported (simple workflow)
solution
    just was simple variable name bug

issue
    from simple_workflow.tools.fastqc1.fastqc1 import fastqc1
solution
    TagManager now has .get_base_tag() method which just returns the basetag with no digits on the end

issue
    create_assemblies_with_unicycler filename and folder name but unicycler tool name
solution
    simple workflow step parser change

issue
    f_file="fastq html_file"  (fastqc)
    wtf? even if this is the default value for the galaxy param, shouldn't it have been split into individual tokens in the ExecutionPath? 
solution
    was another issue with GreedyEPathAnnotator. now fixed. 

issue
    2 outputs which are the same from filtlong
solution
    only create redirect output (or list it in the final outputs) if the redirect '>' is followed by a token with a reference to a galaxy object.

issue
    greedy parsing too greedy (rgFastQC.xml)
    [-f fastq|bam|sam]: -f '${format}' '${input_file_sl}'
    the last two positionals are being taken jointly as the value for -f. the last value is a positional
solution
    added end sentinels to ExecutionPaths
    last position can only be eaten by an option if the option prefix is the 2nd last position. otherwise it now stops short of the last position. 
    designated the end point as being up to the end sentinel, or in the case of the above, the end sentinel -1 

issue
    dynamic selection options (Kraken2 macros.xml)
    <options from_data_table="kraken2_databases">
    seems that this is a data manager which is loaded from the specific galaxy instance. 
solution
    set selectparam.options = []
    modified RealisedTokenValues class to not expand selects where they don't have any options. keeps $selectparam var name. works fine.

issue
    tool step input values are empty strings
    should be None?
    w.step(
        "step6_multiqc",
        multiqc(
            # Options
            title="",
            comment="",
            config="$multiqc_config",
            filename="report",
        )
    )
solution
    this was correct behaviour

issue
    quast tool chosen wrong statement
solution
    0 [int] was being evaluated as False [bool] in conditional statement
    set the check to 'if val is None' rather than 'if val'

issue 
    connections are being quoted 
    simple workflow: notrna="w.step5_create_assemblies_with_unicycler.assembly"
solution
    InputValueType enum created. 
    using this, can decide to quote a value or not when writing janis workflow definition

issue
    Flag listed as an Option
    test/data/tools/quast/quast.xml
        ToolInput(
            'circos',
            Boolean,
            prefix='--circos',
            position=2,
            default="",
            doc="Generage Circos plot Plot Circos version of Icarus contig alignment viewer. possible values: --circos",
        )
solution
    galaxy conditional statements actually hold a SelectToolParameter to do the choice. 
    The Conditional object has a 'test_param' 
    this param can actually be accessed in the <command> section as any normal param as it has a value. 
    these params were added to the XML ingestor parsing process. 