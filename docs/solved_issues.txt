



SOLVED


issue
    tricky text:
        > '"Module \'${repeat.software_cond.software}: \'$pattern\' not found in the file \'$identifier\'"'
        > READ_NAME_REGEX='${ str( $read_name_regex ) }'
        > _JAVA_OPTIONS=\${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && (picard_MarkDuplicates)
        > cannot find 'metrics_file' (tool test evaulation)(picard_MarkDuplicates)
solution
    large reworking of line splitting (now shlex), KEYVAL_PAIRS and regex patterns surrounding these issues

issue
    picard_MarkDuplicates bash script being interpreted as positionals
solution
    replaced `backtick sections` with __BACKTICK_SHELL_STATEMENT__
    temp fix. 

issue
    READ_NAME_REGEX='${ str( $read_name_regex ) }'
solution
    removed spaced from within variables (${hello there} -> ${hellothere}) 
    this is probably bad. 
    only an issue really because its part of a KEY=VALUE pair, which takes priority. 

issue
    samtools_idxstats was selecting wrong statement as tool statement
solution
    created MainStatementInferrer to properly handle selecting correct tool statement

issue
    hisat2 - ERROR:galaxy.util.dbkeys:ERROR: Unable to read builds file: [Errno 2] No such file or directory: 'tool-data/shared/ucsc/builds.txt.sample'
solution
    added the tool-data folder from galaxy source to workdir

issue
    hisat2 tool input '11', '12', '21', '22'
solution
    hisat2 option '-1 ${reads1}' is interpreted as [RAW_NUM, ENV_VAR]
    RAW_NUM was not permitted to be considered a prefix - changed to allow this now. 

issue
    quast - missing 'r_fasta' parameter in workflow step
    find a better way to mark things as optional?
solution
    if a CommandComponent is not Optional and has default=None, but is not linked to a StepInput, can assume it is therefore Optional. 

issue
    prokka workflow output 'out_out...'
    w.output(
        "prokka_out_out_tbl",
        TextFile,
        source=(w.prokka, "out_out_tbl")
    )
    do we care about out_out? 
    this is because we prepend 'out_' but the tool output is already called 'out_tbl'. can check if already startswith 'out', but this may lead to issues. 
solution
    changed tag formatting to check if the basetag already exists

issue
    '.output' still appears on input connections to InputDataStep even though should be WorkflowInput
    long=w.long_reads.output
solution
    required huge refactor - InputDataStep was completely removed. replaced by adding a WorkflowInput instead. 

issue
    alphabetical sort workflow step runtime values w.input('name', datatype)
    w.input("unicycler_fq11", File)
    w.input("unicycler_contamination", Fasta)
    w.input("unicycler_fq12", File)
solution
    was just due to list[Tuple[str, InputValue]] being used as dict[str, InputValue] in a function. destroyed normal ordering. 

issue 
    None values appear in step definition - what does this mean? 
    glimmer=None,
    mgm=None,
	gene_finding=None
solution
    this almost always means use the default value. changed behaviour to reflect.

issue
    scores="", kmers="", fungus, eukaryote, k_mer_stats all have default value = "" (simple workflow quast)
solution
    was just bug in translating gx values into python

issue
    Html, Tabular Datatype in workflow outputs not being imported (simple workflow)
solution
    just was simple variable name bug

issue
    from simple_workflow.tools.fastqc1.fastqc1 import fastqc1
solution
    TagManager now has .get_base_tag() method which just returns the basetag with no digits on the end

issue
    create_assemblies_with_unicycler filename and folder name but unicycler tool name
solution
    simple workflow step parser change

issue
    f_file="fastq html_file"  (fastqc)
    wtf? even if this is the default value for the galaxy param, shouldn't it have been split into individual tokens in the ExecutionPath? 
solution
    was another issue with GreedyEPathAnnotator. now fixed. 

issue
    2 outputs which are the same from filtlong
solution
    only create redirect output (or list it in the final outputs) if the redirect '>' is followed by a token with a reference to a galaxy object.

issue
    greedy parsing too greedy (rgFastQC.xml)
    [-f fastq|bam|sam]: -f '${format}' '${input_file_sl}'
    the last two positionals are being taken jointly as the value for -f. the last value is a positional
solution
    added end sentinels to ExecutionPaths
    last position can only be eaten by an option if the option prefix is the 2nd last position. otherwise it now stops short of the last position. 
    designated the end point as being up to the end sentinel, or in the case of the above, the end sentinel -1 

issue
    dynamic selection options (Kraken2 macros.xml)
    <options from_data_table="kraken2_databases">
    seems that this is a data manager which is loaded from the specific galaxy instance. 
solution
    set selectparam.options = []
    modified RealisedTokenValues class to not expand selects where they don't have any options. keeps $selectparam var name. works fine.

issue
    tool step input values are empty strings
    should be None?
    w.step(
        "step6_multiqc",
        multiqc(
            # Options
            title="",
            comment="",
            config="$multiqc_config",
            filename="report",
        )
    )
solution
    this was correct behaviour

issue
    quast tool chosen wrong statement
solution
    0 [int] was being evaluated as False [bool] in conditional statement
    set the check to 'if val is None' rather than 'if val'

issue 
    connections are being quoted 
    simple workflow: notrna="w.step5_create_assemblies_with_unicycler.assembly"
solution
    InputValueType enum created. 
    using this, can decide to quote a value or not when writing janis workflow definition

issue
    Flag listed as an Option
    test/data/tools/quast/quast.xml
        ToolInput(
            'circos',
            Boolean,
            prefix='--circos',
            position=2,
            default="",
            doc="Generage Circos plot Plot Circos version of Icarus contig alignment viewer. possible values: --circos",
        )
solution
    galaxy conditional statements actually hold a SelectToolParameter to do the choice. 
    The Conditional object has a 'test_param' 
    this param can actually be accessed in the <command> section as any normal param as it has a value. 
    these params were added to the XML ingestor parsing process. 