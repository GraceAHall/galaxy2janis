

NOTE check janis-patterns github for tricky situations

TODO v0.1

add known extensions to galaxy parsed types. 
doesnt' know .fasta = .fa = .fna


untested:
    - recent 
    - container fetching


Today:
    - bugs
        - busco --limit being weird. shows a larger bug involving multiple references to something in command string
        - repeat tags in tool xml (will solve issues?)
        - could not resolve token
            repeatmasker, cutadapt and a million others
        - multiple expanded forms of cmd word

        - missing datatype for positional (augustus)
        - missing datatype for positional '>' (bcftools)
        - parseva worked (old version) but parseval didnt?????
        - the same var being seen in a million places (bcftools)

    - test parsing
    - galaxy templating system
    - when option is GX_OUT, create an input for it (-v '$output')
    - sort out toolinputs, toolarguments and position of everything
    - parse tool xmls
    - gather parsing stats (how many worked etc)
        - call tool.py (should have tool().translate("wdl", to_console) set up)
          to check whether its valid janis 
    

Tomorrow:
    - configfiles
    - testing

Redirect handling
    - 


from non-galaxy command string
--augustus=true

have a registry
know that
    --augustus=true is key-val pair
    --augustus= can be set from $use_augustus boolean gx param
    can simply look at $use_augustus and confirm that either truevalue or falsevalue == '--augustus=true'
    can then set that attribute when translating external -> galaxy 



ON HOLD TILL COMMAND PARSER IS UPDATED
- unsupported_param (group_tag, data_collection, data_column, hidden)
    - data_collection
        - paired files ie fastq will be two individual datasets or paired collection
    - hidden
        - parse as HiddenParam, resolve in parampostprocessor
        - get all references to params with that variable name
        - use the types and values to decide on one of three options:

            
            as static var (create StaticVar?):
                <param name="snpEff_rod_name" type="hidden" value="snpEff" label="ROD Name"/>

            as flag bool:
                <param name="EOL" type="hidden" value="--bol" />
                <param name="EOL" type="hidden" value="--eol" />

                either:
                    - make a flag bool (across occurances, theres only 2 options: no value, or a string)
                    - make a select param (if 2 or more vals)


            ignore hidden param:
                <param name="info_ids" type="hidden" value="" />
                <param name="info_ids" type="text" value="" label="Limit INFO annotation to these INFO IDs" help="List is a comma separated list of fields. When blank, all INFO fields are included" >

                <param name="output_full" type="hidden" value='F' />
                <param name="output_full" type="select" label="Create a tabular output with coefficients for all predictors" >
                

    - group_tag



- improve command string parsing
    - CommandString becomes a class
    - supports finding a query var and returns a VariableReference (move all VariableFinder logic to CommandString)
    - finding variable references needs to be more flexible
    - informs on the context of the variable (appears in #set, appears in conditional block etc)
    - understands if the data is paired that galaxy will format to $var.forward and $var.reverse
    - 



    - aliases 
    - rework param variable detection
    - compound params (multiple methods or using multiple params to set program flag)
    - positional args
    - (cutadapt) --minimum-length=$filter_options.minimum_length
    - (cutadapt) '-a', "'${a.adapter_source.adapter.fields.name}'='${a.adapter_source.adapter}${adapter_options.internal}'"

- tool tests
    - janis has the galaxy tests. parse to janis format
    - galaxy test evalutation - https://github.com/galaxyproject/galaxy/tree/dev/lib/galaxy/tool_util/verify/asserts
    - during tool testing - check whether WilcardSelector can handle the galaxy regex

- duplicate name resolving to LCA in gx_var path?



Complete Milestones













Milestones to v0.1 -------------------------------

 - galaxy type parsing                          (complete)
 - galaxy types integrated into janis           (richard)
 - improved command string parsing              (working, almost complete)
 - small additions (rare params)                (queued) 
 - configfiles (1 day)                          (queued) 
 - tool test platform parsing into janis        (queued)
    - includes ingesting param vals and templating
      command string












Rollout plan -------------------------------------

 - finish v0.1 tasks above
 - integrate passed tools into janis
 - add extra features if necessary to parse remaining tools
 - manually resolve non-passed tools
 - integrate program into janis


Future -------------------------------------------

 - paired files & collections (short reads, composite types imzml)
 - new tools added to toolshed automatically parsed 
 - any which do not pass tests can have manual intervention (fornight / monthly activity)
 - start galaxy workflow parser -> janis



Notes --------------------------------------------

Multithreading
    - added multithreading because 'requests' module takes too long to ping biocontainers
    - making 50-100 requests per sec to quay.io: am I gonna get banned? 
    - doing this every 5 mins - 10 mins when i make changes and want to re-parse all tools-iuc tools

- Galaxy types
    - composite types like imzML? is there info on secondary type? 
    - that kind of extra data can be found in the actual type class def. needed?  

non-wildcard Outputs
    - currently just keeping as WilcardSelector. Not sure how glob works and is deprecated. 
    - glob="output.fastq" works when path is directly known
    - stringformatter for paths ie concatenating folder and filename

Containers
    - Only using latest biocontainer version

Macros
    - supports common macros? is this done? 

Helptext
    - restructuredText processing to make helptext nicer


v0.1 Features ------------------------------------

- automatic container detection
    - just pings url using python 'requests' module
    - cache stores previously checked urls

- logging for tools which can't currently be parsed
    - complex regex
    - types
    - uses configfile
    - needs user input (datatype / command line references) *
    - unresolved container url


