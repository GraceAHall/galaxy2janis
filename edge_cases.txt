

velvetg:

    #if $coverage.cutoff == "auto":
        -cov_cutoff auto

wildcard selector contents:
    <data name="outfile" format="jpg" from_work_dir="out.*" label="${tool.name} on ${on_string}: Assembly Graph Image">

bandage:
'out.$output_format' what is the out doing? is this just positional? oh yeah its just creating the file format

assign_primary_output:

    <data name="output" format="tabular" label="${tool.name} on ${on_string}">
        <discover_datasets directory="split" pattern="(?P&lt;designation&gt;.+)\.tab" format="tabular" visible="true" assign_primary_output="true"/>
        <filter>split_output_cond['split_output_selector'] == 'no'</filter>
    </data>


templating a string list (abyss)
(in='reads1.fa reads2.fa'):

#if str($se_reads) != 'None'
    se='
    #for $v in $se_reads
        $v
    #end for
    '
#end if


dynamic setting kwarg (abyss)

#for $i, $v in enumerate($long_seqs)
    long${i}='$v'
#end for

More abyss shit:

Library pea has reads in two files, pea_1.fa and pea_2.fa.
Library peb has reads in two files, peb_1.fa and peb_2.fa.
Single-end reads are stored in two files, se1.fa and se2.fa.

lib='pea peb' \
pea='pea_1.fa pea_2.fa' peb='peb_1.fa peb_2.fa' \
se='se1.fa se2.fa'





cheetah functions:

    #def text_to_rstringarray($text)
        #set $list = $text.strip().rstrip(',').split(',')

        #set $rstringarray = "c("

        #for $i in range(len($list))
            #set $elem = $list[$i].strip()
            #if $elem != ""
                #set $rstringarray += '"'
                #set $rstringarray += $elem
                #set $rstringarray += '"'
                #if $i != len($list) - 1
                    #set $rstringarray += ','
                #end if
            #end if
        #end for

        #set $rstringarray += ')'
        #return $rstringarray
        
    #end def







